pipeline {
    agent any
    
    environment {
        // Configuration
        APP_NAME = 'software-marketplace-frontend'
        VERSION = "${env.BUILD_ID}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                git(
                    url: 'https://github.com/rohanPSI-1122/Software.git',
                    branch: 'main',
                    changelog: true
                )
            }
        }
        
        stage('Setup Node.js') {
            steps {
                sh '''
                    echo "=== Node.js Environment ==="
                    echo "Node.js version:"
                    node --version
                    echo "NPM version:"
                    npm --version
                    echo "Working directory:"
                    pwd
                '''
            }
        }
        
        stage('Install Dependencies') {
            steps {
                dir('frontend') {
                    sh 'npm install --no-audit --no-fund'

                    echo "✅ Dependencies installed successfully"
                }
            }
        }
        
        stage('Dependency Audit') {
            steps {
                dir('frontend') {
                    sh 'npm audit --json > audit-report.json || true'
                    echo "✅ Dependency audit completed"
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'frontend/audit-report.json', allowEmptyArchive: true
                }
            }
        }
        
        stage('Lint Code') {
            steps {
                dir('frontend') {
                    sh 'npm run lint --silent || true'
                    echo "✅ Code linting completed"
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'frontend/eslint-report.json', allowEmptyArchive: true
                }
            }
        }
        
        stage('Run Unit Tests') {
            steps {
                dir('frontend') {
                    sh 'npm test --silent -- --watchAll=false --coverage || true'
                    echo "✅ Unit tests completed"
                }
            }
            post {
                always {
                    junit allowEmptyResults: true, testResults: 'frontend/coverage/jest-junit.xml'
                    archiveArtifacts artifacts: 'frontend/coverage/**/*', allowEmptyArchive: true
                }
            }
        }
        
        stage('Build Application') {
            steps {
                dir('frontend') {
                    sh 'npm run build --silent'
                    echo "✅ Frontend build completed successfully"
                }
            }
            post {
                success {
                    archiveArtifacts artifacts: 'frontend/dist/**/*', fingerprint: true
                    archiveArtifacts artifacts: 'frontend/build/**/*', allowEmptyArchive: true
                }
            }
        }
        
        stage('Bundle Analysis') {
            steps {
                dir('frontend') {
                    sh 'npm run build --silent -- --stats-json'
                    sh 'npx webpack-bundle-analyzer frontend/build/bundle-stats.json --mode static --report frontend/bundle-report.html || true'
                    echo "✅ Bundle analysis completed"
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'frontend/bundle-report.html', allowEmptyArchive: true
                }
            }
        }
        
        stage('Accessibility Test') {
            steps {
                dir('frontend') {
                    sh 'npm install -g pa11y-ci --silent'
                    sh 'pa11y-ci --config .pa11yci.json --json > accessibility-report.json || true'
                    echo "✅ Accessibility testing completed"
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'frontend/accessibility-report.json', allowEmptyArchive: true
                }
            }
        }
    }
    
    post {
        always {
            // Generate build report
            sh '''
            echo "Frontend CI Build Report" > frontend-ci-report.txt
            echo "=========================" >> frontend-ci-report.txt
            echo "Build Number: $BUILD_NUMBER" >> frontend-ci-report.txt
            echo "Build Status: $currentBuild.currentResult" >> frontend-ci-report.txt
            echo "Build Duration: $currentBuild.durationString" >> frontend-ci-report.txt
            echo "Git Commit: $GIT_COMMIT" >> frontend-ci-report.txt
            echo "Node Version: $(node --version)" >> frontend-ci-report.txt
            echo "NPM Version: $(npm --version)" >> frontend-ci-report.txt
            '''
            archiveArtifacts artifacts: 'frontend-ci-report.txt', fingerprint: true
            
            // Clean workspace
            cleanWs()
        }
        
        success {
            echo "✅ Frontend CI Pipeline completed successfully!"
        }
        
        failure {
            echo "❌ Frontend CI Pipeline failed!"
        }
    }
}
